package com.donkcowan.serviceexample;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.widget.Toast;

public class ServiceExecution extends Service {

    // Declare variables for looper and service handler.
    private Looper mServiceLooper;
    private ServiceHandler mServiceHandler;
	  
    // Handler that receives messages from the thread.
    private final class ServiceHandler extends Handler {
    	
    	// Define ServiceHandler class.
        public ServiceHandler(Looper looper) {super(looper);}
        
        // Handle message - carry out work of the service.
	    @Override
	    public void handleMessage(Message msg) {

            // Wait before Toasting Service Message  
	    	// giving the Service Started message time to display.
	        long endTime = System.currentTimeMillis() + 3*1000;
	        while (System.currentTimeMillis() < endTime) {
	            synchronized (this) {
	            try {wait(endTime - System.currentTimeMillis());} 
	            catch (Exception e) { }
	            }
	        }
	        // Toast Service Message.
	  		Context context = getApplicationContext();
			CharSequence text = getString(R.string.serviceMessage);
			int duration = Toast.LENGTH_LONG;
			Toast toast = Toast.makeText(context, text, duration);
			toast.show();
			      
	        // Can stop the service using the startId, so that we don't stop
	        // the service in the middle of handling another job.
			// Because a Stop button is included in the application, 
			// service not being stopped in this method.
	        //stopSelf(msg.arg1);
	    }
    }	 
	// onBind method.
	@Override
	public IBinder onBind(Intent arg0) {
		// Binding not being used in this version of the service.
		return null;
    }
	// onCreate method.
	@Override
	public void onCreate() {
		super.onCreate();
        
		// Create a thread.
	    HandlerThread thread = new HandlerThread("ServiceStartArguments",
	    		               android.os.Process.THREAD_PRIORITY_BACKGROUND);
	    // Start the thread.
	    thread.start();
	    
	    // Get the thread's looper.
	    mServiceLooper = thread.getLooper();
	    
	    // Create a service handler.
	    mServiceHandler = new ServiceHandler(mServiceLooper);		
	}
	// onStartCommand method. 
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		
	    // For each start request, send a message to start a job and deliver the
	    // start ID so we know which request we're stopping when we finish the job.
	    Message msg = mServiceHandler.obtainMessage();
	    msg.arg1 = startId;
	    mServiceHandler.sendMessage(msg);		
		
	    // Toast Service Started message.
		Context context = getApplicationContext();
		CharSequence text = getString(R.string.serviceStarted);
		int duration = Toast.LENGTH_SHORT;
		Toast toast = Toast.makeText(context, text, duration);
		toast.show();	
		
		// Start a sticky.
		return START_STICKY;
	}	
	// onDestroy method.
	@Override
	public void onDestroy() {
		super.onDestroy();
		
		// Toast Service Stopped message.
		Context context = getApplicationContext();
		CharSequence text = getString(R.string.serviceStopped);
		int duration = Toast.LENGTH_SHORT;
		Toast toast = Toast.makeText(context, text, duration);
		toast.show();
	}
}
